package org.ton.intellij.func.converter

object FuncRenamingMapping {
    val ENTRYPOINT_RENAMING = mapOf<String, String>(
        'recv_internal': 'onInternalMessage',
    'recv_external': 'onExternalMessage',
    'run_ticktock': 'onRunTickTock',
    'split_prepare': 'onSplitPrepare',
    'split_install': 'onSplitInstall',
    )

    val STDLIB_RENAMING = mapOf<String, String>(
        "fake_std_fn" to "FAKE_STD_FN",
        "empty_tuple" to "createEmptyTuple",
        "tpush" to "tuplePush",
        "first" to "tupleFirst",
        "at" to "tupleAt",
        "touch" to "stackMoveToTop",
        "minmax" to "minMax",
        "my_address" to "getMyAddress",
        "get_balance" to "getMyOriginalBalanceWithExtraCurrencies",
        "cur_lt" to "getLogicalTime",
        "block_lt" to "getCurrentBlockLogicalTime",
        "cell_hash" to "cellHash",
        "slice_hash" to "sliceHash",
        "string_hash" to "stringHash",
        "check_signature" to "isSignatureValid",
        "check_data_signature" to "isSliceSignatureValid",
        "compute_data_size" to "calculateCellSizeStrict",
        "slice_compute_data_size" to "calculateSliceSizeStrict",
        "compute_data_size?" to "calculateCellSize",
        "slice_compute_data_size?" to "calculateSliceSize",
        "~dump" to "debugPrint",
        "~strdump" to "debugPrintString",
        "dump_stack" to "debugDumpStack",
        "get_data" to "getContractData",
        "set_data" to "setContractData",
        "get_c3" to "getTvmRegisterC3",
        "set_c3" to "setTvmRegisterC3",
        "bless" to "transformSliceToContinuation",
        "accept_message" to "acceptExternalMessage",
        "set_gas_limit" to "setGasLimit",
        "commit" to "commitContractDataAndActions",
        "divmod" to "divMod",
        "moddiv" to "modDiv",
        "muldiv" to "mulDivFloor",
        "muldivr" to "mulDivRound",
        "muldivc" to "mulDivCeil",
        "muldivmod" to "mulDivMod",
        "begin_parse" to "beginParse",
        "end_parse" to "assertEndOfSlice",
        "load_ref" to "loadRef",
        "preload_ref" to "preloadRef",
        "load_int" to "loadInt",
        "load_uint" to "loadUint",
        "preload_int" to "preloadInt",
        "preload_uint" to "preloadUint",
        "load_bits" to "loadBits",
        "preload_bits" to "preloadBits",
        "load_grams" to "loadCoins",
        "load_coins" to "loadCoins",
        "skip_bits" to "skipBits",
        "first_bits" to "getFirstBits",
        "skip_last_bits" to "removeLastBits",
        "slice_last" to "getLastBits",
        "load_dict" to "loadDict",
        "preload_dict" to "preloadDict",
        "skip_dict" to "skipDict",
        "load_maybe_ref" to "loadMaybeRef",
        "preload_maybe_ref" to "preloadMaybeRef",
        "cell_depth" to "getCellDepth",
        "slice_refs" to "getRemainingRefsCount",
        "slice_bits" to "getRemainingBitsCount",
        "slice_bits_refs" to "getRemainingBitsAndRefsCount",
        "slice_empty?" to "isEndOfSlice",
        "slice_data_empty?" to "isEndOfSliceBits",
        "slice_refs_empty?" to "isEndOfSliceRefs",
        "slice_depth" to "getSliceDepth",
        "equal_slice_bits" to "isSliceBitsEqual",
        "builder_refs" to "getBuilderRefsCount",
        "builder_bits" to "getBuilderBitsCount",
        "builder_depth" to "getBuilderDepth",
        "begin_cell" to "beginCell",
        "end_cell" to "endCell",
        "store_ref" to "storeRef",
        "store_uint" to "storeUint",
        "store_int" to "storeInt",
        "store_slice" to "storeSlice",
        "store_grams" to "storeCoins",
        "store_coins" to "storeCoins",
        "store_dict" to "storeDict",
        "store_maybe_ref" to "storeMaybeRef",
        "store_builder" to "storeBuilder",
        "load_msg_addr" to "loadAddress",
        "parse_addr" to "parseAddress",
        "parse_std_addr" to "parseStandardAddress",
        "config_param" to "getBlockchainConfigParam",
        "raw_reserve" to "reserveToncoinsOnBalance",
        "raw_reserve_extra" to "reserveExtraCurrenciesOnBalance",
        "send_raw_message" to "sendRawMessage",
        "set_code" to "setContractCodePostponed",
        "rand" to "randomRange",
        "get_seed" to "randomGetSeed",
        "set_seed" to "randomSetSeed",
        "randomize" to "randomizeBy",
        "randomize_lt" to "randomizeByLogicalTime",
        "dump" to "debugPrint",
        "strdump" to "debugPrintString",
        "dump_stk" to "debugDumpStack",
        "empty_list" to "createEmptyList",
        "cons" to "listPrepend",
        "uncons" to "listSplit",
        "list_next" to "listNext",
        "car" to "listGetHead",
        "cdr" to "listGetTail",
        "new_dict" to "createEmptyDict",
        "dict_empty?" to "dictIsEmpty",
        "idict_set_ref" to "iDictSetRef",
        "udict_set_ref" to "uDictSetRef",
        "idict_get_ref" to "iDictGetRefOrNull",
        "idict_get_ref?" to "iDictGetRef",
        "udict_get_ref?" to "uDictGetRef",
        "idict_set_get_ref" to "iDictSetAndGetRefOrNull",
        "udict_set_get_ref" to "iDictSetAndGetRefOrNull",
        "idict_delete?" to "iDictDelete",
        "udict_delete?" to "uDictDelete",
        "idict_get?" to "iDictGet",
        "udict_get?" to "uDictGet",
        "idict_delete_get?" to "iDictDeleteAndGet",
        "udict_delete_get?" to "uDictDeleteAndGet",
        "udict_set" to "uDictSet",
        "idict_set" to "iDictSet",
        "dict_set" to "sDictSet",
        "udict_add?" to "uDictSetIfNotExists",
        "udict_replace?" to "uDictSetIfExists",
        "idict_add?" to "iDictSetIfNotExists",
        "idict_replace?" to "iDictSetIfExists",
        "udict_set_builder" to "uDictSetBuilder",
        "idict_set_builder" to "iDictSetBuilder",
        "dict_set_builder" to "sDictSetBuilder",
        "udict_add_builder?" to "uDictSetBuilderIfNotExists",
        "udict_replace_builder?" to "uDictSetBuilderIfExists",
        "idict_add_builder?" to "iDictSetBuilderIfNotExists",
        "idict_replace_builder?" to "iDictSetBuilderIfExists",
        "udict_delete_get_min" to "uDictDeleteFirstAndGet",
        "idict_delete_get_min" to "iDictDeleteFirstAndGet",
        "dict_delete_get_min" to "sDictDeleteFirstAndGet",
        "udict_delete_get_max" to "uDictDeleteLastAndGet",
        "idict_delete_get_max" to "iDictDeleteLastAndGet",
        "dict_delete_get_max" to "sDictDeleteLastAndGet",
        "udict_get_min?" to "uDictGetFirst",
        "udict_get_max?" to "uDictGetLast",
        "udict_get_min_ref?" to "uDictGetFirstAsRef",
        "udict_get_max_ref?" to "uDictGetLastAsRef",
        "idict_get_min?" to "iDictGetFirst",
        "idict_get_max?" to "iDictGetLast",
        "idict_get_min_ref?" to "iDictGetFirstAsRef",
        "idict_get_max_ref?" to "iDictGetLastAsRef",
        "udict_get_next?" to "uDictGetNext",
        "udict_get_nexteq?" to "uDictGetNextOrEqual",
        "udict_get_prev?" to "uDictGetPrev",
        "udict_get_preveq?" to "uDictGetPrevOrEqual",
        "idict_get_next?" to "iDictGetNext",
        "idict_get_nexteq?" to "iDictGetNextOrEqual",
        "idict_get_prev?" to "iDictGetPrev",
        "idict_get_preveq?" to "iDictGetPrevOrEqual",
        "udict::delete_get_min" to "uDictDeleteFirstAndGet",
        "idict::delete_get_min" to "iDictDeleteFirstAndGet",
        "dict::delete_get_min" to "sDictDeleteFirstAndGet",
        "udict::delete_get_max" to "uDictDeleteLastAndGet",
        "idict::delete_get_max" to "iDictDeleteLastAndGet",
        "dict::delete_get_max" to "sDictDeleteLastAndGet",
        "pfxdict_get?" to "prefixDictGet",
        "pfxdict_set?" to "prefixDictSet",
        "pfxdict_delete?" to "prefixDictDelete",
        "my_code" to "getContractCode",
        "gas_consumed" to "getGasConsumedAtTheMoment",
        "my_storage_due" to "getMyStorageDuePayment",
        "get_fee_cofigs" to "getBlockchainFeeConfigParams",
        "skip_maybe_ref" to "skipMaybeRef",
        "load_bool" to "loadBool",
        "store_bool" to "storeBool",
        "store_address_none" to "storeAddressNone",
        "address_none" to "createAddressNone",
        "load_msg_flags" to "loadMsgFlags",
        "is_bounced" to "isMessageBounced",
        "skip_bounced_prefix" to "skipBouncedPrefix",
    )

    val STDLIB_INTRODUCED_CONSTANTS = mapOf(
        'MASTERCHAIN': '-1',
    'BASECHAIN': '0',
    'BOUNCEABLE': '0x18',
    'NON_BOUNCEABLE': '0x10',
    'SEND_MODE_REGULAR': '0',
    'SEND_MODE_PAY_FEES_SEPARATELY': '1',
    'SEND_MODE_IGNORE_ERRORS': '2',
    'SEND_MODE_DESTROY': '32',
    'SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE': '64',
    'SEND_MODE_CARRY_ALL_BALANCE': '128',
    'SEND_MODE_BOUNCE_ON_ACTION_FAIL': '16',
    'SEND_MODE_ESTIMATE_FEE_ONLY': '1024',
    'RESERVE_MODE_EXACT_AMOUNT': '0',
    'RESERVE_MODE_ALL_BUT_AMOUNT': '1',
    'RESERVE_MODE_AT_MOST': '2',
    'RESERVE_MODE_INCREASE_BY_ORIGINAL_BALANCE': '4',
    'RESERVE_MODE_NEGATE_AMOUNT': '8',
    'RESERVE_MODE_BOUNCE_ON_ACTION_FAIL': '16',
    )

    val STDLIB_DELETED_FUNCTIONS = setOf(
        'single': true,
    'unsingle': true,
    'pair': true,
    'unpair': true,
    'triple': true,
    'untriple': true,
    'tuple4': true,
    'untuple4': true,
    'second': true,
    'third': true,
    'fourth': true,
    'pair_first': true,
    'pair_second': true,
    'triple_first': true,
    'triple_second': true,
    'triple_third': true,
    'buy_gas': true,
    'parse_var_addr': true,
    'impure_touch': true,
    )

    val STDLIB_AUTO_IMPORTS = mapOf(

    )
}
