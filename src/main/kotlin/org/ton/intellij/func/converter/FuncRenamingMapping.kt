package org.ton.intellij.func.converter

object FuncRenamingMapping {
    val ENTRYPOINT_RENAMING = mapOf<String, String>(
        "recv_internal" to "onInternalMessage",
        "recv_external" to "onExternalMessage",
        "run_ticktock" to "onRunTickTock",
        "split_prepare" to "onSplitPrepare",
        "split_install" to "onSplitInstall",
    )

    val STDLIB_RENAMING = mapOf<String, String>(
        "fake_std_fn" to "FAKE_STD_FN",
        "empty_tuple" to "createEmptyTuple",
        "tpush" to "tuplePush",
        "first" to "tupleFirst",
        "at" to "tupleAt",
        "touch" to "stackMoveToTop",
        "minmax" to "minMax",
        "my_address" to "getMyAddress",
        "get_balance" to "getMyOriginalBalanceWithExtraCurrencies",
        "cur_lt" to "getLogicalTime",
        "block_lt" to "getCurrentBlockLogicalTime",
        "cell_hash" to "cellHash",
        "slice_hash" to "sliceHash",
        "string_hash" to "stringHash",
        "check_signature" to "isSignatureValid",
        "check_data_signature" to "isSliceSignatureValid",
        "compute_data_size" to "calculateCellSizeStrict",
        "slice_compute_data_size" to "calculateSliceSizeStrict",
        "compute_data_size?" to "calculateCellSize",
        "slice_compute_data_size?" to "calculateSliceSize",
        "~dump" to "debugPrint",
        "~strdump" to "debugPrintString",
        "dump_stack" to "debugDumpStack",
        "get_data" to "getContractData",
        "set_data" to "setContractData",
        "get_c3" to "getTvmRegisterC3",
        "set_c3" to "setTvmRegisterC3",
        "bless" to "transformSliceToContinuation",
        "accept_message" to "acceptExternalMessage",
        "set_gas_limit" to "setGasLimit",
        "commit" to "commitContractDataAndActions",
        "divmod" to "divMod",
        "moddiv" to "modDiv",
        "muldiv" to "mulDivFloor",
        "muldivr" to "mulDivRound",
        "muldivc" to "mulDivCeil",
        "muldivmod" to "mulDivMod",
        "begin_parse" to "beginParse",
        "end_parse" to "assertEndOfSlice",
        "load_ref" to "loadRef",
        "preload_ref" to "preloadRef",
        "load_int" to "loadInt",
        "load_uint" to "loadUint",
        "preload_int" to "preloadInt",
        "preload_uint" to "preloadUint",
        "load_bits" to "loadBits",
        "preload_bits" to "preloadBits",
        "load_grams" to "loadCoins",
        "load_coins" to "loadCoins",
        "skip_bits" to "skipBits",
        "first_bits" to "getFirstBits",
        "skip_last_bits" to "removeLastBits",
        "slice_last" to "getLastBits",
        "load_dict" to "loadDict",
        "preload_dict" to "preloadDict",
        "skip_dict" to "skipDict",
        "load_maybe_ref" to "loadMaybeRef",
        "preload_maybe_ref" to "preloadMaybeRef",
        "cell_depth" to "getCellDepth",
        "slice_refs" to "getRemainingRefsCount",
        "slice_bits" to "getRemainingBitsCount",
        "slice_bits_refs" to "getRemainingBitsAndRefsCount",
        "slice_empty?" to "isEndOfSlice",
        "slice_data_empty?" to "isEndOfSliceBits",
        "slice_refs_empty?" to "isEndOfSliceRefs",
        "slice_depth" to "getSliceDepth",
        "equal_slice_bits" to "isSliceBitsEqual",
        "builder_refs" to "getBuilderRefsCount",
        "builder_bits" to "getBuilderBitsCount",
        "builder_depth" to "getBuilderDepth",
        "begin_cell" to "beginCell",
        "end_cell" to "endCell",
        "store_ref" to "storeRef",
        "store_uint" to "storeUint",
        "store_int" to "storeInt",
        "store_slice" to "storeSlice",
        "store_grams" to "storeCoins",
        "store_coins" to "storeCoins",
        "store_dict" to "storeDict",
        "store_maybe_ref" to "storeMaybeRef",
        "store_builder" to "storeBuilder",
        "load_msg_addr" to "loadAddress",
        "parse_addr" to "parseAddress",
        "parse_std_addr" to "parseStandardAddress",
        "config_param" to "getBlockchainConfigParam",
        "raw_reserve" to "reserveToncoinsOnBalance",
        "raw_reserve_extra" to "reserveExtraCurrenciesOnBalance",
        "send_raw_message" to "sendRawMessage",
        "set_code" to "setContractCodePostponed",
        "rand" to "randomRange",
        "get_seed" to "randomGetSeed",
        "set_seed" to "randomSetSeed",
        "randomize" to "randomizeBy",
        "randomize_lt" to "randomizeByLogicalTime",
        "dump" to "debugPrint",
        "strdump" to "debugPrintString",
        "dump_stk" to "debugDumpStack",
        "empty_list" to "createEmptyList",
        "cons" to "listPrepend",
        "uncons" to "listSplit",
        "list_next" to "listNext",
        "car" to "listGetHead",
        "cdr" to "listGetTail",
        "new_dict" to "createEmptyDict",
        "dict_empty?" to "dictIsEmpty",
        "idict_set_ref" to "iDictSetRef",
        "udict_set_ref" to "uDictSetRef",
        "idict_get_ref" to "iDictGetRefOrNull",
        "idict_get_ref?" to "iDictGetRef",
        "udict_get_ref?" to "uDictGetRef",
        "idict_set_get_ref" to "iDictSetAndGetRefOrNull",
        "udict_set_get_ref" to "iDictSetAndGetRefOrNull",
        "idict_delete?" to "iDictDelete",
        "udict_delete?" to "uDictDelete",
        "idict_get?" to "iDictGet",
        "udict_get?" to "uDictGet",
        "idict_delete_get?" to "iDictDeleteAndGet",
        "udict_delete_get?" to "uDictDeleteAndGet",
        "udict_set" to "uDictSet",
        "idict_set" to "iDictSet",
        "dict_set" to "sDictSet",
        "udict_add?" to "uDictSetIfNotExists",
        "udict_replace?" to "uDictSetIfExists",
        "idict_add?" to "iDictSetIfNotExists",
        "idict_replace?" to "iDictSetIfExists",
        "udict_set_builder" to "uDictSetBuilder",
        "idict_set_builder" to "iDictSetBuilder",
        "dict_set_builder" to "sDictSetBuilder",
        "udict_add_builder?" to "uDictSetBuilderIfNotExists",
        "udict_replace_builder?" to "uDictSetBuilderIfExists",
        "idict_add_builder?" to "iDictSetBuilderIfNotExists",
        "idict_replace_builder?" to "iDictSetBuilderIfExists",
        "udict_delete_get_min" to "uDictDeleteFirstAndGet",
        "idict_delete_get_min" to "iDictDeleteFirstAndGet",
        "dict_delete_get_min" to "sDictDeleteFirstAndGet",
        "udict_delete_get_max" to "uDictDeleteLastAndGet",
        "idict_delete_get_max" to "iDictDeleteLastAndGet",
        "dict_delete_get_max" to "sDictDeleteLastAndGet",
        "udict_get_min?" to "uDictGetFirst",
        "udict_get_max?" to "uDictGetLast",
        "udict_get_min_ref?" to "uDictGetFirstAsRef",
        "udict_get_max_ref?" to "uDictGetLastAsRef",
        "idict_get_min?" to "iDictGetFirst",
        "idict_get_max?" to "iDictGetLast",
        "idict_get_min_ref?" to "iDictGetFirstAsRef",
        "idict_get_max_ref?" to "iDictGetLastAsRef",
        "udict_get_next?" to "uDictGetNext",
        "udict_get_nexteq?" to "uDictGetNextOrEqual",
        "udict_get_prev?" to "uDictGetPrev",
        "udict_get_preveq?" to "uDictGetPrevOrEqual",
        "idict_get_next?" to "iDictGetNext",
        "idict_get_nexteq?" to "iDictGetNextOrEqual",
        "idict_get_prev?" to "iDictGetPrev",
        "idict_get_preveq?" to "iDictGetPrevOrEqual",
        "udict::delete_get_min" to "uDictDeleteFirstAndGet",
        "idict::delete_get_min" to "iDictDeleteFirstAndGet",
        "dict::delete_get_min" to "sDictDeleteFirstAndGet",
        "udict::delete_get_max" to "uDictDeleteLastAndGet",
        "idict::delete_get_max" to "iDictDeleteLastAndGet",
        "dict::delete_get_max" to "sDictDeleteLastAndGet",
        "pfxdict_get?" to "prefixDictGet",
        "pfxdict_set?" to "prefixDictSet",
        "pfxdict_delete?" to "prefixDictDelete",
        "my_code" to "getContractCode",
        "gas_consumed" to "getGasConsumedAtTheMoment",
        "my_storage_due" to "getMyStorageDuePayment",
        "get_fee_cofigs" to "getBlockchainFeeConfigParams",
        "skip_maybe_ref" to "skipMaybeRef",
        "load_bool" to "loadBool",
        "store_bool" to "storeBool",
        "store_address_none" to "storeAddressNone",
        "address_none" to "createAddressNone",
        "load_msg_flags" to "loadMsgFlags",
        "is_bounced" to "isMessageBounced",
        "skip_bounced_prefix" to "skipBouncedPrefix",
    )

    val STDLIB_INTRODUCED_CONSTANTS = mapOf(
        "MASTERCHAIN" to "-1",
        "BASECHAIN" to "0",
        "BOUNCEABLE" to "0x18",
        "NON_BOUNCEABLE" to "0x10",
        "SEND_MODE_REGULAR" to "0",
        "SEND_MODE_PAY_FEES_SEPARATELY" to "1",
        "SEND_MODE_IGNORE_ERRORS" to "2",
        "SEND_MODE_DESTROY" to "32",
        "SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE" to "64",
        "SEND_MODE_CARRY_ALL_BALANCE" to "128",
        "SEND_MODE_BOUNCE_ON_ACTION_FAIL" to "16",
        "SEND_MODE_ESTIMATE_FEE_ONLY" to "1024",
        "RESERVE_MODE_EXACT_AMOUNT" to "0",
        "RESERVE_MODE_ALL_BUT_AMOUNT" to "1",
        "RESERVE_MODE_AT_MOST" to "2",
        "RESERVE_MODE_INCREASE_BY_ORIGINAL_BALANCE" to "4",
        "RESERVE_MODE_NEGATE_AMOUNT" to "8",
        "RESERVE_MODE_BOUNCE_ON_ACTION_FAIL" to "16",
    )

    val STDLIB_DELETED_FUNCTIONS = setOf(
        "single",
        "unsingle",
        "pair",
        "unpair",
        "triple",
        "untriple",
        "tuple4",
        "untuple4",
        "second",
        "third",
        "fourth",
        "pair_first",
        "pair_second",
        "triple_first",
        "triple_second",
        "triple_third",
        "buy_gas",
        "parse_var_addr",
        "impure_touch",
    )

    val STDLIB_AUTO_IMPORTS = mapOf(
        "createEmptyDict" to "@stdlib/tvm-dicts",
        "dictIsEmpty" to "@stdlib/tvm-dicts",
        "iDictGet" to "@stdlib/tvm-dicts",
        "uDictGet" to "@stdlib/tvm-dicts",
        "sDictGet" to "@stdlib/tvm-dicts",
        "iDictSet" to "@stdlib/tvm-dicts",
        "uDictSet" to "@stdlib/tvm-dicts",
        "sDictSet" to "@stdlib/tvm-dicts",
        "iDictSetRef" to "@stdlib/tvm-dicts",
        "uDictSetRef" to "@stdlib/tvm-dicts",
        "sDictSetRef" to "@stdlib/tvm-dicts",
        "iDictSetIfNotExists" to "@stdlib/tvm-dicts",
        "uDictSetIfNotExists" to "@stdlib/tvm-dicts",
        "iDictSetIfExists" to "@stdlib/tvm-dicts",
        "uDictSetIfExists" to "@stdlib/tvm-dicts",
        "iDictGetRef" to "@stdlib/tvm-dicts",
        "uDictGetRef" to "@stdlib/tvm-dicts",
        "sDictGetRef" to "@stdlib/tvm-dicts",
        "iDictGetRefOrNull" to "@stdlib/tvm-dicts",
        "uDictGetRefOrNull" to "@stdlib/tvm-dicts",
        "sDictGetRefOrNull" to "@stdlib/tvm-dicts",
        "iDictDelete" to "@stdlib/tvm-dicts",
        "uDictDelete" to "@stdlib/tvm-dicts",
        "sDictDelete" to "@stdlib/tvm-dicts",
        "iDictSetAndGet" to "@stdlib/tvm-dicts",
        "uDictSetAndGet" to "@stdlib/tvm-dicts",
        "sDictSetAndGet" to "@stdlib/tvm-dicts",
        "iDictSetAndGetPreviousRefOrNull" to "@stdlib/tvm-dicts",
        "uDictSetAndGetPreviousRefOrNull" to "@stdlib/tvm-dicts",
        "iDictDeleteAndGet" to "@stdlib/tvm-dicts",
        "uDictDeleteAndGet" to "@stdlib/tvm-dicts",
        "sDictDeleteAndGet" to "@stdlib/tvm-dicts",
        "iDictSetBuilder" to "@stdlib/tvm-dicts",
        "uDictSetBuilder" to "@stdlib/tvm-dicts",
        "sDictSetBuilder" to "@stdlib/tvm-dicts",
        "iDictSetBuilderIfNotExists" to "@stdlib/tvm-dicts",
        "uDictSetBuilderIfNotExists" to "@stdlib/tvm-dicts",
        "iDictSetBuilderIfExists" to "@stdlib/tvm-dicts",
        "uDictSetBuilderIfExists" to "@stdlib/tvm-dicts",
        "iDictDeleteFirstAndGet" to "@stdlib/tvm-dicts",
        "uDictDeleteFirstAndGet" to "@stdlib/tvm-dicts",
        "sDictDeleteFirstAndGet" to "@stdlib/tvm-dicts",
        "iDictDeleteLastAndGet" to "@stdlib/tvm-dicts",
        "uDictDeleteLastAndGet" to "@stdlib/tvm-dicts",
        "sDictDeleteLastAndGet" to "@stdlib/tvm-dicts",
        "iDictGetFirst" to "@stdlib/tvm-dicts",
        "uDictGetFirst" to "@stdlib/tvm-dicts",
        "sDictGetFirst" to "@stdlib/tvm-dicts",
        "iDictGetFirstAsRef" to "@stdlib/tvm-dicts",
        "uDictGetFirstAsRef" to "@stdlib/tvm-dicts",
        "sDictGetFirstAsRef" to "@stdlib/tvm-dicts",
        "iDictGetLast" to "@stdlib/tvm-dicts",
        "uDictGetLast" to "@stdlib/tvm-dicts",
        "sDictGetLast" to "@stdlib/tvm-dicts",
        "iDictGetLastAsRef" to "@stdlib/tvm-dicts",
        "uDictGetLastAsRef" to "@stdlib/tvm-dicts",
        "sDictGetLastAsRef" to "@stdlib/tvm-dicts",
        "iDictGetNext" to "@stdlib/tvm-dicts",
        "uDictGetNext" to "@stdlib/tvm-dicts",
        "iDictGetNextOrEqual" to "@stdlib/tvm-dicts",
        "uDictGetNextOrEqual" to "@stdlib/tvm-dicts",
        "iDictGetPrev" to "@stdlib/tvm-dicts",
        "uDictGetPrev" to "@stdlib/tvm-dicts",
        "iDictGetPrevOrEqual" to "@stdlib/tvm-dicts",
        "uDictGetPrevOrEqual" to "@stdlib/tvm-dicts",
        "prefixDictGet" to "@stdlib/tvm-dicts",
        "prefixDictSet" to "@stdlib/tvm-dicts",
        "prefixDictDelete" to "@stdlib/tvm-dicts",

        "getGasConsumedAtTheMoment" to "@stdlib/gas-payments",
        "acceptExternalMessage" to "@stdlib/gas-payments",
        "setGasLimitToMaximum" to "@stdlib/gas-payments",
        "setGasLimit" to "@stdlib/gas-payments",
        "calculateStorageFee" to "@stdlib/gas-payments",
        "calculateMessageFee" to "@stdlib/gas-payments",
        "calculateMessageFeeWithoutLumpPrice" to "@stdlib/gas-payments",
        "calculateOriginalMessageFee" to "@stdlib/gas-payments",
        "getMyStorageDuePayment" to "@stdlib/gas-payments",

        "createEmptyList" to "@stdlib/lisp-lists",
        "listPrepend" to "@stdlib/lisp-lists",
        "listSplit" to "@stdlib/lisp-lists",
        "listNext" to "@stdlib/lisp-lists",
        "listGetHead" to "@stdlib/lisp-lists",
        "listGetTail" to "@stdlib/lisp-lists",

        "getTvmRegisterC3" to "@stdlib/tvm-lowlevel",
        "setTvmRegisterC3" to "@stdlib/tvm-lowlevel",
        "transformSliceToContinuation" to "@stdlib/tvm-lowlevel",
        "stackMoveToTop" to "@stdlib/tvm-lowlevel",
    )

    val REMOVED_BINARY_OPERATORS = setOf(
        "~%",
        "^%",
        "/%",
        "~/=",
        "^/=",
        "~%=",
        "^%=",
        "~>>=",
        "^>>=",
    )

    val KEYWORDS_RENAMING = mapOf(
        "nil" to "null",
        "val" to "vall",
        "continue" to "continuee",
        "break" to "breakk",
        "self" to "selff",
    )

    val FUNCTIONS_WHERE_DOT_CALL_BECAME_MUTATING = mapOf(
        "load_int" to "int",
        "load_uint" to "int",
        "load_bits" to "slice",
        "load_ref" to "cell",
        "load_grams" to "int",
        "load_coins" to "int",
        "load_dict" to "cell",
        "load_maybe_ref" to "cell",
        "load_msg_addr" to "slice",
        "skip_bits" to "self",
        "skip_last_bits" to "self",
        "skip_dict" to "self",
        "idict_set_ref" to "void",
        "udict_set_ref" to "void",
        "idict_set_get_ref" to "cell",
        "udict_set_get_ref" to "cell",
        "idict_delete?" to "int",
        "udict_delete?" to "int",
        "idict_delete_get?" to "(slice, int)",
        "udict_delete_get?" to "(slice, int)",
        "udict_set" to "void",
        "idict_set" to "void",
        "dict_set" to "void",
        "udict_add?" to "int",
        "udict_replace?" to "int",
        "idict_add?" to "int",
        "idict_replace?" to "int",
        "udict_set_builder" to "void",
        "idict_set_builder" to "void",
        "dict_set_builder" to "void",
        "udict_add_builder?" to "int",
        "udict_replace_builder?" to "int",
        "idict_add_builder?" to "int",
        "idict_replace_builder?" to "int",
        "udict_delete_get_min" to "(int, slice, int)",
        "idict_delete_get_min" to "(int, slice, int)",
        "udict::delete_get_min" to "(int, slice, int)",
        "idict::delete_get_min" to "(int, slice, int)",
        "dict_delete_get_min" to "(int, slice, int)",
        "dict::delete_get_min" to "(int, slice, int)",
        "udict_delete_get_max" to "(int, slice, int)",
        "idict_delete_get_max" to "(int, slice, int)",
        "udict::delete_get_max" to "(int, slice, int)",
        "idict::delete_get_max" to "(int, slice, int)",
        "dict_delete_get_max" to "(int, slice, int)",
        "dict::delete_get_max" to "(int, slice, int)",
        "pfxdict_set?" to "int",
        "pfxdict_delete?" to "int",
        "tpush" to "void",
        "list_next" to "T",
    )
}
