{
    parserClass="org.ton.intellij.tlb.parser.TlbParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Tlb"
    psiImplClassSuffix="Impl"
    psiPackage="org.ton.intellij.tlb.psi"
    psiImplPackage="org.ton.intellij.tlb.psi.impl"
    implements="org.ton.intellij.tlb.psi.TlbElement"

    elementTypeHolderClass="org.ton.intellij.tlb.psi.TlbElementTypes"
    elementTypeClass="org.ton.intellij.tlb.psi.TlbElementType"
    tokenTypeClass="org.ton.intellij.tlb.psi.TlbTokenType"

    extends(".*Expression")=Expression
    extends(".*Field")=Field

    generateTokenAccessors=true

    tokens = [
        IDENTIFIER = "regexp:[a-zA-Z_$?:][0-9a-zA-Z_$?:]*"
        PLUS='+'
        MINUS='-'
        TIMES='*'
        COLUMN=':'
        SEMICOLUMN=';'
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACKET='['
        RBRACKET=']'
        EQUALS='='
        UNDERSCORE='_'
        QUESTION='?'
        DOT='.'
        TILDE='~'
        CIRCUMFLEX='^'
        DOLLAR='$'
        EQ='=='
        LESS='<'
        GREATER='>'
        LEQ='<='
        GEQ='>='
        NEQ='!='
        NAT_LESS='#<'
        NAT_LEQ='#<='
        NAT='#'
        NAT_WIDTH='##'
        NAT_LESS='#<'
        NAT_LEQ='#<='
        ANY_KEYWORD='Any'
        CELL_KEYWORD='Cell'
        TYPE_KEYWORD='Type'
        INT_KEYWORD='int'
        UINT_KEYWORD='uint'
        BITS_KEYWORD='bits'
        BITSTRING='regexp:#[0-9a-fA-F]+_?|$[01]*_?'
        WHITE_SPACE='regexp:\s+'
        LINE_COMMENT='LINE_COMMENT'
        BLOCK_COMMENT='BLOCK_COMMENT'
        BLOCK_DOCUMENTATION='BLOCK_DOCUMENTATION'
        LINE_DOCUMENTATION='LINE_DOCUMENTATION'
        NUMBER='regexp:[0-9]+'
    ]
}

file ::= TypeDef*
TypeDef ::= !<<eof>> TypeDef_with_recovery ';'{
    pin=1
}
private TypeDef_with_recovery ::= Constructor '=' IDENTIFIER TypeParam* {
    recoverWhile=TypeDef_recover
    pin=2
}
private TypeDef_recover ::= !(';')

Constructor ::= IDENTIFIER ConstructorTag? ConstructorFieldList {
    pin=1
    implements="org.ton.intellij.tlb.psi.TlbNamedElement"
    mixin = "org.ton.intellij.tlb.psi.impl.TlbConstructorImplMixin"
    stubClass = "org.ton.intellij.tlb.stub.TlbConstructorStub"
    elementTypeFactory = "org.ton.intellij.tlb.stub.TlbStubKt.factory"
}

ConstructorTag ::= BITSTRING
ConstructorFieldList ::= Field*

Field ::= ImplicitField | ConstraintField | ExplicitField
ImplicitField ::= '{' ImplicitField_def '}' {
    pin=2
}
private ImplicitField_def ::= IDENTIFIER ':' ('Type' | '#') {
    pin=2
    recoverWhile=ImplicitField_recovery
}
private ImplicitField_recovery ::= !('}'|'{'|'('|')'|'='|';')

ConstraintField ::= '{' Expression '}' {
    pin=2
}
ExplicitField ::= [ ( IDENTIFIER | '_') ':' ] expr95 {
}

TypeParam ::= '~'? TerminateExpression

Expression ::= RelCompBinExpression // parse_expr10
    | AddExpression // parse_expr20
    | MulExpression // parse_expr30
    | ApplyExpression
    | expr95

ApplyExpression ::= Expression &('('|IDENTIFIER|NUMBER|'~'|'^'|'['|BuiltInTypeExpression) Expression {
    rightAssociative=true
}

private expr95 ::= ConditionalExpression | GetBitExpression | TerminateExpression

RelCompBinExpression ::= Expression RelCompBinOp Expression
AddExpression ::= Expression AddBinOp Expression
MulExpression ::= Expression MulBinOp Expression
ConditionalExpression ::= Expression '?' Expression {
    pin=2
    methods=[
        condition="/Expression[0]"
        thenBranch="/Expression[1]"
    ]
}
GetBitExpression ::= Expression '.' Expression {
    pin = 2
}

TerminateExpression ::= ParenExpression
    | IntegerExpression
    | AnonConstructorExpression
    | CellRefExpression
    | ReferenceExpression
    | BuiltInTypeExpression

RelCompBinOp ::= '>' | '>=' | '<' | '<=' | '=' { name = "operator" }
AddBinOp ::= '+' { name = "operator" }
MulBinOp ::= '*' { name = "operator" }

ParenExpression ::= '(' Expression ')' {
    pin = 1
}
IntegerExpression ::= NUMBER
AnonConstructorExpression ::= '[' ConstructorFieldList ']' {
    pin = 1
}
CellRefExpression ::= '^' TerminateExpression {
    pin = 1
}
ReferenceExpression ::= '~'? IDENTIFIER
BuiltInTypeExpression ::= ANY_KEYWORD
    | CELL_KEYWORD
    | INT_KEYWORD
    | UINT_KEYWORD
    | BITS_KEYWORD
    | NAT
    | NAT_LESS
    | NAT_LEQ
    | NAT_WIDTH
