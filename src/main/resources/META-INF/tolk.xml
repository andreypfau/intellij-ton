<idea-plugin>
    <extensions defaultExtensionNs="com.intellij">
        <fileType name="Tolk"
                  implementationClass="org.ton.intellij.tolk.TolkFileType"
                  fieldName="INSTANCE"
                  language="Tolk"
                  extensions="tolk"
        />

        <lang.parserDefinition language="Tolk"
                               implementationClass="org.ton.intellij.tolk.parser.TolkParserDefinition"/>
        <lang.syntaxHighlighterFactory language="Tolk"
                                       implementationClass="org.ton.intellij.tolk.highlighting.TolkSyntaxHighlighterFactory"/>
        <lang.commenter language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkCommenter"/>

        <lang.braceMatcher language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkBraceMatcher"/>
        <lang.quoteHandler language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkQuoteHandler"/>
        <lang.foldingBuilder language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkFoldingBuilder"/>
        <lang.findUsagesProvider language="Tolk"
                                 implementationClass="org.ton.intellij.tolk.ide.TolkFindUsagesProvider"/>
        <lang.implementationTextSelectioner language="Tolk"
                                            implementationClass="org.ton.intellij.tolk.ide.TolkImplementationTextSelectioner"/>
        <!--        <platform.backend.documentation.psiTargetProvider id="TolkDocumentationTargetProvider"-->
        <!--                                                          implementation="org.ton.intellij.tolk.ide.quickdoc.TolkPsiDocumentationTargetProvider"/>-->
        <lang.documentationProvider language="Tolk"
                                    implementationClass="org.ton.intellij.tolk.doc.TolkDocumentationProvider"/>
        <lang.formatter language="Tolk" implementationClass="org.ton.intellij.tolk.ide.formatter.TolkFormatter"/>
        <lang.refactoringSupport language="Tolk"
                                 implementationClass="org.ton.intellij.tolk.refactor.TolkRefactoringSupportProvider"/>
        <lang.namesValidator language="Tolk"
                             implementationClass="org.ton.intellij.tolk.refactor.TolkNamesValidator"/>
        <completion.contributor language="Tolk"
                                implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionContributor"/>
        <completion.confidence language="Tolk" order="last"
                               implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionConfidence"/>
        <lookup.charFilter implementation="org.ton.intellij.tolk.ide.completion.TolkCharFilter"/>

        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkNamedElementIndex"/>
        <stubElementTypeHolder class="org.ton.intellij.tolk.psi.TolkElementTypes" externalIdPrefix="tolk."/>
        <lang.elementManipulator forClass="org.ton.intellij.tolk.psi.TolkIncludeDefinition"
                                 implementationClass="org.ton.intellij.tolk.psi.impl.TolkIncludePathElementManipulator"/>


        <liveTemplateContext
                contextId="tolk"
                implementation="org.ton.intellij.tolk.template.TolkEverywhereContextType"/>
        <defaultLiveTemplates file="/liveTemplates/tolkHidden.xml" hidden="true"/>

        <!-- Hints -->
<!--        TODO: fix-->
<!--        <codeInsight.parameterInfo language="Tolk"-->
<!--                                   implementationClass="org.ton.intellij.tolk.ide.TolkParameterInfoHandler"/>-->
        <codeInsight.parameterNameHints language="Tolk"
                                        implementationClass="org.ton.intellij.tolk.ide.hints.TolkParameterHintsProvider"/>

        <codeInsight.declarativeInlayProvider bundle="messages.TolkBundle"
                                              group="VALUES_GROUP"
                                              implementationClass="org.ton.intellij.tolk.ide.hints.TolkConstantHintsProvider"
                                              isEnabledByDefault="true"
                                              language="Tolk"
                                              nameKey="numeric.constant.values"
                                              providerId="tolk.constant.hints">
        </codeInsight.declarativeInlayProvider>


        <annotator language="Tolk" implementationClass="org.ton.intellij.tolk.highlighting.TolkAnnotator"/>
        <annotator language="Tolk" implementationClass="org.ton.intellij.tolk.highlighting.TolkDocAnnotator"/>

        <codeInsight.lineMarkerProvider language="Tolk"
                                        implementationClass="org.ton.intellij.tolk.ide.linemarker.TolkRecursiveCallLineMarkerProvider"/>

        <languageInjectionContributor language="Tolk"
                                      implementationClass="org.ton.intellij.tolk.ide.TolkLanguageInjector"/>

        <languageInjector implementation="org.ton.intellij.tolk.psi.TolkStringAsmInjector"/>

        <localInspection language="Tolk" displayName="Unused function inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedFunctionInspection"/>
        <localInspection language="Tolk" displayName="Unused variable inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedVariableInspection"/>
        <localInspection language="Tolk" displayName="Unused parameter inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedFunctionParameterInspection"/>
        <localInspection language="Tolk" displayName="Unused type parameter inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedTypeParameterInspection"/>

        <!-- style issues -->
        <localInspection language="Tolk" groupPath="Tolk"
                         bundle="messages.InspectionBundle"
                         key="inspection.constant.expression.name"
                         groupKey="group.style.name"
                         enabledByDefault="true" level="INFORMATION"
                         implementationClass="org.ton.intellij.tolk.inspection.style.TolkConstantExpressionInspection"/>

        <!-- numeric issues -->
        <localInspection language="Tolk" groupPath="Tolk"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.numeric.TolkDivideByZeroInspection"/>
        <localInspection language="Tolk" groupPath="Tolk"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.numeric.TolkIntOverflowInspection"/>

        <!-- control flow issues -->
        <localInspection language="Tolk" displayName="Missing return at end of function" groupPath="Tolk"
                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkMissingReturnInspection"/>
        <localInspection language="Tolk" displayName="Calling function" groupPath="Tolk"
                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkFunctionCallInspection"/>
        <localInspection language="Tolk" groupPath="Tolk" groupName="Control flow issues" enabledByDefault="true"
                         level="INFORMATION"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkReplaceGuardClauseWithFunctionCallInspection"
                         displayName="Replace guard clause with function call"/>
        <!--        <localInspection language="Tolk" displayName="`if` condition is not an integer" groupPath="Tolk"-->
        <!--                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.tolk.inspection.TolkIfConditionIsNotAnIntegerInspection"/>-->

        <!-- control flow issues -->

        <!-- general -->
        <localInspection language="Tolk" displayName="Unresolved reference inspection" groupPath="Tolk"
                         groupName="General" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnresolvedReferenceInspection"/>
        <localInspection language="Tolk" displayName="Unresolved type identifier" groupPath="Tolk"
                         groupName="General" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnresolvedTypeIdentifierInspection"/>

        <!-- Completion -->
        <completion.contributor language="Tolk"
                                implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionContributor"/>

        <!-- Code Style -->
        <langCodeStyleSettingsProvider
                implementation="org.ton.intellij.tolk.ide.formatter.TolkLanguageCodeStyleSettingsProvider"/>

        <projectConfigurable instance="org.ton.intellij.tolk.ide.configurable.TolkProjectConfigurable"
                             groupId="language"
                             id="language.tolk"
                             bundle="messages.TolkBundle" key="tolk.name"/>

        <additionalLibraryRootsProvider
                implementation="org.ton.intellij.tolk.sdk.TolkSdkSyntheticLibraryProvider"/>
    </extensions>

    <actions>
        <action id="NewTolk" class="org.ton.intellij.tolk.action.file.TolkCreateFileAction"
                text="Tolk File" description="Create new Tolk file">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFunc"/>
        </action>
    </actions>
</idea-plugin>
