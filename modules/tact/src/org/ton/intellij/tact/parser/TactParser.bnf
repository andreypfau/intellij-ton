{
    parserClass='org.ton.intellij.tact.parser.TactParser'
    parserUtilClass='org.ton.intellij.tact.parser.TactParserUtil'

    implements='org.ton.intellij.tact.psi.TactElement'

    elementTypeHolderClass='org.ton.intellij.tact.psi.TactElementTypes'

    elementTypeClass="org.ton.intellij.tact.psi.TactElementType"
    tokenTypeClass="org.ton.intellij.tact.psi.TactTokenType"

    psiClassPrefix='Tact'
    psiImplClassSuffix='Impl'
    psiPackage='org.ton.intellij.tact.psi'
    psiImplPackage='org.ton.intellij.tact.psi.impl'

    extends(".*Type")=Type
    extends(".*Expression")=Expression
    extends(".*Statement")=Statement
    elementType(".+BinExpression") = BinExpression
    elementType(".+BinOp") = BinOp

    generateTokenAccessors=true

    tokens = [
        LBRACE              = '{'
        RBRACE              = '}'
        LBRACK              = '['
        RBRACK              = ']'
        LPAREN              = '('
        RPAREN              = ')'
        COLON               = ':'
        SEMICOLON           = ';'
        COMMA               = ','
        DOT                 = '.'

        PLUS                = '+'
        MINUS               = '-'
        MUL                 = '*'
        DIV                 = '/'
        REM                 = '%'
        AND                 = '&'
        OR                  = '|'
        XOR                 = '^'
        LT                  = '<'
        GT                  = '>'
        EQ                  = '='
        Q                   = '?'
        EXCL                = '!'
        TILDE               = '~'

        EQEQ                = '=='
        EXCLEQ              = '!='
        GTEQ                = '>='
        LTEQ                = '<='
        GTGT                = '>>'
        LTLT                = '<<'
        OROR                = '||'
        ANDAND              = '&&'
        EXCLEXCL            = '!!'
        PLUSLET             = '+='
        MINUSLET            = '-='
        TIMESLET            = '*='
        DIVLET              = '/='
        MODLET              = '%='
        ANDLET              = '&='
        ORLET               = '|='
        XORLET              = '^='

        IF_KEYWORD          = 'if'
        ELSE_KEYWORD        = 'else'
        WHILE_KEYWORD       = 'while'
        DO_KEYWORD          = 'do'
        UNTIL_KEYWORD       = 'until'
        REPEAT_KEYWORD      = 'repeat'
        RETURN_KEYWORD      = 'return'
        EXTENDS_KEYWORD     = 'extends'
        MUTATES_KEYWORD     = 'mutates'
        VIRTUAL_KEYWORD     = 'virtual'
        OVERRIDE_KEYWORD    = 'override'
        INLINE_KEYWORD      = 'inline'
        NATIVE_KEYWORD      = 'native'
        LET_KEYWORD         = 'let'
        CONST_KEYWORD       = 'const'
        FUN_KEYWORD         = 'fun'
        INIT_OF_KEYWORD     = 'initOf'
        AS_KEYWORD          = 'as'
        ABSTRACT_KEYWORD    = 'abstract'
        PRIMITIVE_KEYWORD   = 'primitive'
        MAP_KEYWORD         = 'map'

        IMPORT_KEYWORD      = 'import'
        STRUCT_KEYWORD      = 'struct'
        MESSAGE_KEYWORD     = 'message'
        CONTRACT_KEYWORD    = 'contract'
        TRAIT_KEYWORD       = 'trait'
        WITH_KEYWORD        = 'with'
        INIT_KEYWORD        = 'init'
        RECEIVE_KEYWORD     = 'receive'
        EXTERNAL_KEYWORD    = 'external'
        GET_KEYWORD         = 'get'
        SELF_KEYWORD        = 'self'
        BOUNCED_KEYWORD     = 'bounced'
        TRY_KEYWORD         = 'try'
        CATCH_KEYWORD       = 'catch'
        FOREACH_KEYWORD     = 'foreach'
        IN_KEYWORD          = 'in'

        INTERFACE_MACRO     = '@interface'
        NAME_MACRO          = '@name'

        ESCAPE_SEQUENCE     = 'regexp:\\\\.'
        WHITE_SPACE         = 'regexp:\s+'
        INTEGER_LITERAL     = 'regexp:(0[xX][0-9a-fA-F][0-9a-fA-F_]*\b)|(\b[0-9_]+\b)'
        STRING_PART         = 'regexp:(\"([^\"\r\n\\]|\\.)*\")'
        BOOLEAN_LITERAL     = 'regexp:(true|false)'
        NULL_LITERAL        = 'null'
        IDENTIFIER          = 'regexp:\p{Alpha}\w*'
        FUNC_IDENTIFIER     = 'regexp:\p{Alpha}\w*'
        BLOCK_COMMENT       = 'regexp:/\*(\*(?!/)|[^*])*\*/'
        LINE_COMMENT        = 'regexp://(.*)'
        OPEN_QUOTE          = 'regexp:"'
        CLOSE_QUOTE         = 'regexp:"'
        REGULAR_STRING_PART = 'regexp:([^"\r\n\\]|\\.)*'
    ]
}

File ::= ProgramItem_with_recover*
private ProgramItem ::= Struct
                      | Message
                      | Contract
                      | Primitive
                      | Function
                      | Import
                      | Trait
                      | Constant
private ProgramItem_with_recover ::= !<<eof>> ProgramItem {
    pin=1
//    recoverWhile=RootItem_recover
}
private RootItem_recover ::= !Item_first

private Item_first ::= 'import' | 'struct' | 'message' | '@interface' | 'contract' | 'trait' | 'get' | 'mutates' | 'extends' | 'virtual' | 'override' | 'inline' | 'abstract' | 'fun' | '@name' | 'native' | 'const' | 'receive' | 'bounced' | 'external'

Import ::= 'import' StringLiteral ';' {pin=1}

StringLiteral ::= OPEN_QUOTE StringLiteralPart* CLOSE_QUOTE
StringLiteralPart ::= REGULAR_STRING_PART | ESCAPE_SEQUENCE

Primitive ::= 'primitive' IDENTIFIER !'?' ';' {
    pin=2
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactTypeDeclarationElement"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactPrimitiveImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactPrimitiveStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}

// Type
Type ::= BouncedType | MapType | ReferencedType
ReferencedType ::= IDENTIFIER '?'? {
    pin=1
    mixin = "org.ton.intellij.tact.psi.impl.TactReferencedTypeImplMixin"
}

BouncedType ::= 'bounced' '<' ReferencedType '>' {pin=1}
MapType ::= 'map' '<' MapTypeItem ',' MapTypeItem '>' {
    pin=1
}
MapTypeItem ::= ReferencedType As? {
    pin=1
}
As ::= 'as' IDENTIFIER {
    pin = 1
}

// Field
Field ::= IDENTIFIER TypeAscription As? Assigment? {
    pin=1
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactFieldImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactFieldStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}
private Assigment ::= '=' Expression {
    pin = 1
}

// Constant
ConstantAttribute ::= 'virtual' | 'override' | 'abstract'
Constant ::= ConstantAttribute* !'fun' 'const' IDENTIFIER TypeAscription Assigment? ';' {
    pin = 4
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactAbstractable"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactConstantImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactConstantStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}

// Struct
Struct ::= 'struct' IDENTIFIER BlockFields {
    pin = 2
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactTypeDeclarationElement"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactStructImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactStructStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}

Message ::= 'message' MessageId? IDENTIFIER BlockFields {
    pin = 1
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactTypeDeclarationElement"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactMessageImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactMessageStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}
MessageId ::= '(' INTEGER_LITERAL ')' {
    pin=1
}
BlockFields ::= '{' [<<trailing_semicolon_separated_list Field>>] '}' {pin=1}

// Contract
WithClause ::= 'with' <<trailing_comma_separated_list Type>> {pin=1}
Contract ::= ContractAttribute* 'contract' IDENTIFIER WithClause? ContractBody {
    pin = 2
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactTypeDeclarationElement"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactContractImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactContractStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}
ContractBody ::= '{' ContractItem_with_recover* '}' {pin=1}
private ContractItem_with_recover ::= !('}' | <<eof>>) ContractItem {
    pin=1
//    recoverWhile=ContractItem_recover
}
private ContractItem_recover ::= !('}' | Item_first | IDENTIFIER)
private ContractItem ::= StorageVariable
               | Constant
               | ContractInit
               | ReceiveFunction
               | BouncedFunction
               | ExternalFunction
               | Function

private StorageVariable ::= Field ';'

ContractAttribute ::= '@interface' StringId {pin=1}
ContractInit ::= 'init' FunctionParameters Block {
    pin=1
    implements=[
        "org.ton.intellij.tact.psi.TactFunctionLike"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactContractInitImplMixin"
}

// Trait
Trait ::= ContractAttribute* 'trait' IDENTIFIER WithClause? TraitBody {
    pin = 2
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactTypeDeclarationElement"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactTraitImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactTraitStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
}
TraitBody ::= '{' TraitItem* '}' {
    pin = 1
}
private TraitItem ::= StorageVariable
            | Constant
            | ReceiveFunction
            | BouncedFunction
            | ExternalFunction
            | Function

// Function
FunctionAttribute ::= "get" | 'mutates' | 'extends' | 'virtual' | 'override' | 'inline' | 'abstract'
Function ::= (NativeFunctionHead | FunctionAttribute*) (!'native' 'fun')? IDENTIFIER FunctionParameters TypeAscription? FunctionBody {
    implements = [
        "org.ton.intellij.tact.psi.TactNameIdentifierOwner"
        "org.ton.intellij.tact.psi.TactInferenceContextOwner"
        "org.ton.intellij.tact.psi.TactFunctionLike"
        "org.ton.intellij.tact.psi.TactAbstractable"
    ]
    mixin = "org.ton.intellij.tact.psi.impl.TactFunctionImplMixin"
    stubClass = "org.ton.intellij.tact.stub.TactFunctionStub"
    elementTypeFactory = "org.ton.intellij.tact.stub.TactStubKt.factory"
    pin=3
}
private NativeFunctionHead ::= NameAttribute FunctionAttribute* 'native' {
//    pin=2
}

NameAttribute ::= '@name' '(' FUNC_IDENTIFIER ')' {
    pin=1
}

FunctionParameters ::= '(' [ (SelfParameter ',' <<trailing_comma_separated_list FunctionParameter>>) | (SelfParameter ','?) | <<trailing_comma_separated_list FunctionParameter>> ] ')' {pin=1}
FunctionParameter ::= IDENTIFIER TypeAscription {
    pin=1
    implements=[
        "org.ton.intellij.tact.psi.TactNamedElement"
    ]
    mixin="org.ton.intellij.tact.psi.impl.TactFunctionParameterImplMixin"
}
SelfParameter ::= 'self' TypeAscription {pin=1}

private FunctionBody ::= ';' | Block

ReceiveFunction ::= 'receive' (StringId|FunctionParameters) Block {
    pin=1
    implements=[
        "org.ton.intellij.tact.psi.TactFunctionLike"
    ]
    mixin="org.ton.intellij.tact.psi.impl.TactReceiveFunctionImplMixin"
}
BouncedFunction ::= 'bounced' FunctionParameters Block {
    pin=1
    implements=[
        "org.ton.intellij.tact.psi.TactFunctionLike"
    ]
    mixin="org.ton.intellij.tact.psi.impl.TactBouncedFunctionImplMixin"
}
ExternalFunction ::= 'external' (StringId|FunctionParameters) Block {
    pin=1
    implements=[
        "org.ton.intellij.tact.psi.TactFunctionLike"
    ]
    mixin="org.ton.intellij.tact.psi.impl.TactExternalFunctionImplMixin"
}
StringId ::= '(' StringLiteral ')' {pin=2}

// Statements
Statement ::= AssignStatement
            | LetStatement
            | BlockStatement
            | ReturnStatement
            | ExpressionStatement
            | ConditionStatement
            | WhileStatement
            | RepeatStatement
            | UntilStatement
            | TryStatement
            | ForEachStatement
             {
//    extends = 'org.ton.intellij.tact.psi.TactStubbedElementImpl<?>'
//    stubClass = "com.intellij.psi.stubs.StubBase<?>"
}
private Statement_first ::= 'let' | '{' | 'return' | Expression_first | 'if' | 'while' | 'repeat' | 'do'

Block ::= '{' BlockItem* '}' {pin=1}
private BlockItem ::= !'}' Statement {
    pin=1
//    recoverWhile=BlockItem_recover
}
private BlockItem_recover ::= !('}' | Statement_first | Item_first | ';')

LetStatement ::= 'let' (IDENTIFIER|'_') TypeAscription? '=' Expression ';' {
    pin = 1
    rightAssociative=true
    implements=[
        "org.ton.intellij.tact.psi.TactNamedElement"
    ]
    mixin="org.ton.intellij.tact.psi.impl.TactLetStatementImplMixin"
}
private TypeAscription ::= ':' Type {
    pin = 1
}

BlockStatement ::= Block
ReturnStatement ::= 'return' Expression? ';'? { pin = 1 }
ExpressionStatement ::= Expression (';' | &'}') {
    pin=1
}
AssignStatement ::= Expression AssignBinOp Expression ';' {
    rightAssociative = true
}

AssignBinOp ::= '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' {
    name = "operator"
}

ConditionStatement ::= 'if' Condition Block ElseBranch? {pin=1}
ElseBranch ::= 'else' (Block | ConditionStatement) {pin=1}
WhileStatement ::= 'while' Condition Block {pin=1}
RepeatStatement ::= 'repeat' Condition Block {pin=1}
UntilStatement ::= 'do' Block 'until' Condition ';' {pin=1}
TryStatement ::= 'try' Block CatchClause? {pin=1}
CatchClause ::= 'catch' '(' CatchParameter ')' Block {pin=1}
CatchParameter ::= IDENTIFIER {
    mixin = "org.ton.intellij.tact.psi.impl.TactCatchParameterMixin"
    implements = [
        "org.ton.intellij.tact.psi.TactNamedElement"
    ]
}
ForEachStatement ::= 'foreach' '(' ForEachKey ',' ForEachValue 'in' Expression ')' Block {pin=1}
ForEachKey ::= IDENTIFIER {
    mixin = "org.ton.intellij.tact.psi.impl.TactForEachKeyMixin"
    implements = [
        "org.ton.intellij.tact.psi.TactNamedElement"
    ]
}
ForEachValue ::= IDENTIFIER {
    mixin = "org.ton.intellij.tact.psi.impl.TactForEachValueMixin"
    implements = [
        "org.ton.intellij.tact.psi.TactNamedElement"
    ]
}

Condition ::= Expression

// Expressions
Expression ::= TernaryExpression
             | BoolOrBinExpression
             | BoolAndBinExpression
             | BitOrBinExpression
             | BitXorBinExpression
             | BitAndBinExpression
             | CompBinExpression
             | RelCompBinExpression
             | BitShiftBinExpression
             | AddBinExpression
             | MulBinExpression
             | UnaryExpression
             | NotNullExpression
             | DotExpression
             | CallExpression
             | ParenExpression
             | StructExpression
             | IntegerExpression
             | BooleanExpression
             | ReferenceExpression !'('
             | NullExpression
             | SelfExpression
             | InitOfExpression
             | StringExpression {
//    extends = 'org.ton.intellij.tact.psi.TactStubbedElementImpl<?>'
//    stubClass = "com.intellij.psi.stubs.StubBase<?>"
}
private Expression_first ::= '-' | '+' | '!' | IDENTIFIER | '(' | INTEGER_LITERAL | 'null' | 'intOf' | StringLiteral

TernaryExpression ::= Expression '?' Expression ':' Expression {
    pin=2
    methods=[
        condition="/Expression[0]"
        thenBranch="/Expression[1]"
        elseBranch="/Expression[2]"
    ]
}

fake BinExpression ::= Expression BinOp Expression {
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
}
fake BinOp ::= '||' | '&&'
    | '!=' | '=='
    | '>' | '>=' | '<' | '<='
    | '>>' | '<<'
    | '&' | '|' | '^'
    | '+' | '-'
    | '*' | '/' | '%'

BoolOrBinExpression ::= Expression BoolOrBinOp Expression
BoolAndBinExpression ::= Expression BoolAndBinOp Expression
BitOrBinExpression ::= Expression BitOrBinOp Expression
BitXorBinExpression ::= Expression BitXorBinOp Expression
BitAndBinExpression ::= Expression BitAndBinOp Expression
CompBinExpression ::= Expression CompBinOp Expression
RelCompBinExpression ::= Expression RelCompBinOp Expression
BitShiftBinExpression ::= Expression BitShiftBinOp Expression
AddBinExpression ::= Expression AddBinOp Expression
MulBinExpression ::= Expression MulBinOp Expression

BoolOrBinOp ::= '||' { name = "operator" }
BoolAndBinOp ::= '&&' { name = "operator" }
CompBinOp ::= '==' | '!=' { name = "operator" }
RelCompBinOp ::= '>' | '>=' | '<' | '<=' { name = "operator" }
BitShiftBinOp ::= '>>' | '<<' { name = "operator" }
BitAndBinOp ::= '&' { name = "operator" }
BitOrBinOp ::= '|' { name = "operator" }
BitXorBinOp ::= '^' { name = "operator" }
AddBinOp ::= ('+'  !'+') | ('-' !'-') { name = "operator" }
MulBinOp ::= '*' | '/' | '%' { name = "operator" }

UnaryExpression ::= ('-'|'+'|'!'|'~') Expression
NotNullExpression ::= Expression '!!'

DotExpression ::= Expression '.' CallOrField
private CallOrField ::= () (CallExpression | FieldExpression) {
    pin=1
}
CallExpression ::= IDENTIFIER '(' [<<trailing_comma_separated_list Expression>>] ')' {
    pin=2
    mixin="org.ton.intellij.tact.psi.impl.TactCallExpressionImplMixin"
}
FieldExpression ::= IDENTIFIER !'(' {
    pin=2
    mixin="org.ton.intellij.tact.psi.impl.TactFieldExpressionImplMixin"
}

ParenExpression ::= '(' ParenExpressionItem ')' {pin=1}
private ParenExpressionItem ::= Expression

StructExpression ::= IDENTIFIER '{' StructExpressionFields '}' {
    mixin = "org.ton.intellij.tact.psi.impl.TactStructExpressionImplMixin"
}

private StructExpressionFields ::= <<trailing_comma_separated_list StructExpressionField_with_recover>> {

}

StructExpressionField ::= IDENTIFIER (':' Expression)? {pin=1}
private StructExpressionField_with_recover ::= !('}') StructExpressionField {
    pin=1
//    recoverWhile=StructExpressionField_recover
}
private StructExpressionField_recover ::= !(IDENTIFIER | ',' | '}')


IntegerExpression ::= INTEGER_LITERAL
BooleanExpression ::= BOOLEAN_LITERAL
ReferenceExpression ::= IDENTIFIER {
    mixin = "org.ton.intellij.tact.psi.impl.TactReferenceExpressionImplMixin"
}
NullExpression ::= 'null'
SelfExpression ::= 'self'
InitOfExpression ::= 'initOf' IDENTIFIER '(' [<<trailing_comma_separated_list Expression>>] ')' {
    pin = 1
    mixin = "org.ton.intellij.tact.psi.impl.TactInitOfExpressionImplMixin"
}
StringExpression ::= StringLiteral

//private meta comma_separated_list ::= <<param>> ( ',' <<param>> )*
private meta trailing_comma_separated_list ::= <<param>> (',' (<<param>> | &')' | &'}'))*
private meta trailing_semicolon_separated_list ::= <<param>> (';' (<<param>> | &'}'))*
